from libs import AeroBDSM
from abc import ABC
from libs.handler import *
from math import *
from typing import Dict

class Profile(ABC):
    '''
    Класс расчета АДХ профиля (изолированного крыла бесконечного размаха)

    Функции:
        - geometry() - функция вывода геометрических параметров профиля
    ...
        - c_y(...) - функция расчета коэффициента нормальной силы профиля
        - c_ya(...) - функция расчета коэффициента подъемной силы профиля
    ...
        - c_x(...) - функция расчета коэффициента продольной силы профиля
        - c_xa(...) - функция расчета коэффициента силы лобового сопротивления профиля
        - c_xa_dn(M) - функция расчета донного сопротивления профиля
    ...
        - x_d(...) - функция расчета координаты центра давления профиля
    ...
        - m_z(...) - функция расчета коэффициента продольного момента профиля
    ...
        - K_w() - функция расчета коэффициента, представляющего собой отношение коэффициента силы волнового сопротивления рассматриваемого профиля к коэффициенту силы волнового сопротивления ромбовидного профиля
        - M_cr(c_y) - функция расчета критического числа Маха профиля
    '''

    def __init__(self, b: float, cc: float, xx_c: float, rr_0: float, h_s: float) -> None:
        '''
        Создание полей объекта класса и расчет геометрических параметров профиля

        Ввод:   b: float - длина хорды, м
                cc: float - относительная толщина профиля в долях хорды
                xx_c: float - относительная координата положения максимальной толщины профиля долях хорды
                rr_0: float - относительный радиус скругления передней кромки крыла в долях ...?
                hb: float - относительная высота бугорков шероховатой поверхности тела в долях хорды ?это здсь нужно?
        Вывод:  ...
        '''

        # Проверка корректности заданных геометрических параметров крыла
        assert all(map(lambda x: 0 <= x <= 1, [cc, rr_0, h_s])), 'Относительные величины не должны выходить за диапазон [0, 1]'
        assert b > 0, 'Длина хорды крыла должна быть положительной величиной'

        self.b = b                              # Длина хорды
        self.cc = cc                            # Относительная толщина профиля в долях хорды
        self.xx_c = xx_c                        # Относительная координата положения максимальной толщины профиля в долях хорды
        self.rr_0 = rr_0                        # Относительный радиус скругления передней кромки крыла в долях ...?
        self.h_s = h_s                            # Относительная высота бугорков шероховатой поверхности тела в долях хорды
        
    def geometry(self) -> Dict:
        '''
        Вывод геометрических параметров профиля изолированного крыла

        Ввод:   ...
        Вывод:  ...
        '''

        ...

    # @checkSavedValue
    def c_y(self) -> float:
        '''
        Расчет коэффициента нормальной силы изолированного крыла бесконечного размаха

        Ввод:   ...
        Вывод:  c_y: float - коэффициент нормальной силы изолированного крыла бесконечного размаха [-]
        '''

        ...

    # @checkSavedValue
    def M_cr(self, c_y: float = 0) -> float:
        '''
        Расчет критического числа Маха профиля

        Ввод:   c_y: float - коэффициент нормальной силы
        Вывод:  M_cr: float - критическое число Маха профиля        '''
      
        # Вызываем библиотечную функцию для определения критического числа Маха (для симметричных дозвуковых профилей)
        M_cr = AeroBDSM.get_Mcr_pr(self.cc, abs(c_y), self.xx_c).Value
        
        # Результат
        return M_cr

    # @checkSavedValue
    def K_w(self) -> float:
        '''
        Расчет коэффициента, представляющего собой отношение коэффициента волнового сопротивления рассматриваемого профиля к коэффициенту волнового сопротивления ромбовидного профиля

        Ввод:   ...
        Вывод:  K_w: float - коэффициент, представляющий собой отношение коэффициента волнового сопротивления рассматриваемого профиля к коэффициенту волнового сопротивления ромбовидного профиля
        '''

        ...

    # @checkSavedValue
    def c_xa(self) -> float:
        '''
        Расчет коэффициента силы лобового сопротивления профиля

        Ввод:   ...
        Вывод:  c_xa: float - коэффициент силы лобового сопротивления профиля
        '''

        ...

    # @checkSavedValue
    def c_ya(self) -> float:
        '''
        Расчет коэффициента подъемной силы профиля

        Ввод:   ...
        Вывод:  c_ya: float - коэффициент подъемной силы профиля
        '''

        ...

    # @checkSavedValue
    def c_x(self) -> float:
        '''
        Расчет коэффициента продольной силы профиля

        Ввод:   ...
        Вывод:  c_x: float - коэффициент продольной силы профиля
        '''

        ...
    
    def c_xa_dn(self, M: float) -> float:
        '''
        Расчет коэффициента донного сопротивления профиля

        Ввод:   M: float - число Маха
        Вывод:  c_xa_dn: float - коэффициент донного сопротивления профиля
        '''

        # Если у профиля есть затупленная задняя кромка, то вызываем библиотечную функцию для определения коэффициента донного сопротивления
        if hasattr(self, 'hh'):
            c_xa_dn = AeroBDSM.get_Cxdon_pr(M).Value * self.hh
        else:
            c_xa_dn = 0

        # Результат
        return c_xa_dn

    # @checkSavedValue
    def x_d(self) -> float:
        '''
        Расчет координаты центра давления профиля

        Ввод:   ...
        Вывод:  x_d: float - координата центра давления профиля, (от носка хорды), м
        '''

        ...

    # @checkSavedValue
    def m_z(self) -> float:
        '''
        Расчет коэффициента продольного момента профиля

        Ввод:   M: float - число Маха
                alpha: float - угол атаки, рад
        Вывод:  m_z: float - коэффициент продольного момента профиля (относительно ...?)
        '''

        ...
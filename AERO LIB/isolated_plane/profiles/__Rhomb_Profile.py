from libs import AeroBDSM
from libs.handler import *
from typing import Dict
from .__Profile import Profile

class RhombProfile(Profile):
    '''
    Класс расчета АДХ ромбовидного профиля   
    '''

    def __init__(self, b: float, cc: float, xx_c: float, rr_0: float, hb: float) -> None:
        '''
        Создание полей объекта класса и расчет геометрических параметров изолированного крыла бесконечного размаха c профилем, образованным дугами окружности или параболы

        Ввод:   b: float - длина хорды крыла, м
                cc: float - относительная толщина профиля крыла в долях хорды
                xx_c: float - относительная координата положения максимальной толщины профиля крыла в долях хорды
                rr_0: float - относительный радиус скругления передней кромки крыла в долях ... ?
                hb: float - относительная высота бугорков шероховатой поверхности тела в долях хорды
        Вывод:  ...
        '''

        super().__init__(b, cc, xx_c, rr_0, hb)

    def geometry(self) -> Dict:
        '''
        Вывод геометрических параметров профиля

        Ввод:   ...
        Вывод:  
                b: float - длина хорды крыла, м
                cc: float - относительная толщина профиля крыла в долях хорды
                xx_c: float - относительная координата положения максимальной толщины профиля крыла в долях хорды
                rr_0: float - относительный радиус скругления передней кромки крыла в долях ... ?
                hb: float - относительная высота бугорков шероховатой поверхности тела в долях хорды
                    
        '''
        # Результат
        result = {
            'b': self.b,
            'cc': self.cc,
            'xx_c': self.xx_c,
            'rr_0': self.rr_0,
            'hb': self.hb
            }

        # Результат
        return result

    # @checkSavedValue
    def M_cr(self, c_y: float = 0) -> float:
        '''
        Расчет критического числа Маха профиля

        Ввод:   c_y: float - коэффициент нормальной силы
        Вывод:  M_cr: float - критическое число Маха профиля        '''
      
        # Вызываем библиотечную функцию для определения критического числа Маха (для симметричных дозвуковых профилей)
        # Критическое число Маха ромбовидных профилей на 10-12% ниже
        M_cr = AeroBDSM.get_Mcr_pr(self.cc, abs(c_y), self.xx_c).Value * 0.88
        
        # Результат
        return M_cr

    # @checkSavedValue
    def K_w(self) -> float:
        '''
        Расчет коэффициента, представляющего собой отношение коэффициента силы волнового сопротивления данного профиля к коэффициенту силы волнового сопротивления ромбовидного профиля

        Ввод:   ...
        Вывод:  K_w: float - коэффициент, представляющий собой отношение коэффициента силы волнового сопротивления данного профиля к коэффициенту силы волнового сопротивления ромбовидного профиля
        '''

        # Коэффициент, представляющий собой отношение коэффициента силы волнового сопротивления ромбовидного профиля к коэффициенту силы волнового сопротивления ромбовидного профиля изолированного крыла бесконечного размаха [-]
        K_w = 1

        # Результат
        return K_w
from libs import AeroBDSM
from libs.handler import *
from typing import Dict
from .__Hex_Profile import HexProfile

class HexProfileEdge(HexProfile):
    '''
    Класс расчета АДХ шестиугольного профиля с затупленной задней кромкой
    '''

    def __init__(self, b: float, cc: float, xx_c: float, aa: float, rr_0: float, hb: float, hh: float, xx_h: float) -> None:
        '''
        Создание полей объекта класса и расчет геометрических параметров изолированного крыла бесконечного размаха c шестиугольным профилем с затупленной задней кромкой

        Ввод:   b: float - длина хорды крыла, м
                cc: float - относительная толщина профиля крыла в долях хорды
                xx_c: float - относительная координата положения максимальной толщины профиля крыла в долях хорды
                aa: float - отношение геометрического параметра "а" в долях хорды
                rr_0: float - относительный радиус скругления передней кромки крыла в долях ... ?
                hb: float - относительная высота бугорков шероховатой поверхности тела в долях хорды
                hh: float - относительная высота затупления задней кромки в долях хорды (с учетом затупления)
                xx_h: float - относительная координата положения затупленной задней кромки в долях хорды
        Вывод:  ...
        '''
        assert all(map(lambda x: 0 <= x <= 1, [hh, xx_h])), 'Относительные величины не должны выходить за диапазон [0, 1]'
        super().__init__(b, cc, xx_c, aa, rr_0, hb)
        self.hh = hh                            # Относительная высота затупления задней кромки в долях хорды (с учетом затупления)
        self.xx_h = xx_h                        # Относительная координата положения затупленной задней кромки в долях хорды

    def geometry(self) -> Dict:
        '''
        Вывод геометрических параметров профиля

        Ввод:   ...
        Вывод:  
                b: float - длина хорды крыла, м
                cc: float - относительная толщина профиля крыла в долях хорды
                xx_c: float - относительная координата положения максимальной толщины профиля крыла в долях хорды
                aa: float - отношение геометрического параметра "a" в долях хорды
                rr_0: float - относительный радиус скругления передней кромки крыла в долях ... ?
                hb: float - относительная высота бугорков шероховатой поверхности тела в долях хорды
                hh: float - относительная высота затупления задней кромки в долях хорды (с учетом затупления)
                xx_h: float - относительная координата положения затупленной задней кромки в долях хорды
        '''

        # Результат
        result = {
            'b': self.b,
            'cc': self.cc,
            'xx_c': self.xx_c,
            'aa': self.aa,
            'rr_0': self.rr_0,
            'hb': self.hb,
            'hh': self.hh,
            'xx_h': self.xx_h
            }

        # Результат
        return result

    # @checkSavedValue
    def M_cr(self, c_y: float = 0) -> float:
        '''
        Расчет критического числа Маха профиля

        Ввод:   c_y: float - коэффициент нормальной силы
        Вывод:  M_cr: float - критическое число Маха профиля        '''
      
        # Вызываем библиотечную функцию для определения критического числа Маха (для симметричных дозвуковых профилей)
        # Критическое число Маха ромбовидных профилей на 10-12% ниже
        M_cr = AeroBDSM.get_Mcr_pr(self.cc, abs(c_y), self.xx_c).Value * 0.88
        
        # Результат
        return M_cr

    # @checkSavedValue
    def K_w(self) -> float:
        '''
        Расчет коэффициента, представляющего собой отношение коэффициента силы волнового сопротивления данного профиля к коэффициенту силы волнового сопротивления ромбовидного профиля

        Ввод:   ...
        Вывод:  K_w: float - коэффициент, представляющий собой отношение коэффициента силы волнового сопротивления данного профиля к коэффициенту силы волнового сопротивления ромбовидного профиля
        '''

        # Коэффициент, представляющий собой отношение коэффициента силы волнового сопротивления шестиугольного профиля (с наличием/отсутствием затупления задней кромки) к коэффициенту силы волнового сопротивления ромбовидного профиля изолированного крыла бесконечного размаха [-]
        K_w = (1 / (1 - self.aa)) * (1 - (self.hh / 2 / self.cc)) * (1 - (1 - self.aa) * (self.hh / 2 / self.cc))

        # Результат
        return K_w